#include "string.h"

int String::DefineSize(const char* str)
{
    int i;
    for(i = 0; str[i] != '\0'; i++)
        {}
    return i+1;
} 

String::String(const char* str)
{
    size = DefineSize(str);         
    string = new char[size];
    for(int i = 0; i < size; i++) {
        string[i] = str[i];
    }
}

String::String(const String& str)
{
    size = str.size;
    string = new char[size];
    for(int i = 0; i < size; i++) {
        string[i] = str.string[i];
    }
}

bool String::operator==(const String& str)
{
    if(size != str.size) { 
        return false; 
    } 
    for(int i = 0; i < size1; i++) { 
        if(string[i] != str.string[i]) { 
           return false; 
        } 
    } 
    return true; 
}

bool String::operator<(const String& str)
{
    int minSize (size < str.size) ? size : str.size;
    for(int i = 0; i < minSize; i++) {
        if(string[i] < str.string[i])
        { return true; }
        else if(string[i] > str.string[i])
        { return false; }
    }
    return false;
}

bool String::operator>(const String& str)
{
    if(*this < str)
    { return false; }
    return true;
}

char String::operator[](int index)
{
   return string[index];
}

const String& String::operator=(const String& str)
{
    size = str.size;  
    for(int i = 0; i < size; i++) {
        string[i] = str.string[i];
    }
    return *this;
}
